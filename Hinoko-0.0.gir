<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <package name="hinoko"/>
  <namespace name="Hinoko"
             version="0.0"
             shared-library="libhinoko.so.0"
             c:identifier-prefixes="Hinoko"
             c:symbol-prefixes="hinoko_">
    <record name="CycleTimer"
            c:type="HinokoCycleTimer"
            glib:type-name="HinokoCycleTimer"
            glib:get-type="hinoko_cycle_timer_get_type"
            c:symbol-prefix="cycle_timer">
      <source-position filename="../src/cycle_timer.h" line="16"/>
      <constructor name="new" c:identifier="hinoko_cycle_timer_new">
        <doc xml:space="preserve"
             filename="../src/cycle_timer.c"
             line="20">Allocate and return an instance of HinokoCycleTimer.</doc>
        <source-position filename="../src/cycle_timer.h" line="20"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/cycle_timer.c"
               line="25">An instance of HinokoCycleTimer.</doc>
          <type name="CycleTimer" c:type="HinokoCycleTimer*"/>
        </return-value>
      </constructor>
      <method name="get_clock_id"
              c:identifier="hinoko_cycle_timer_get_clock_id">
        <doc xml:space="preserve"
             filename="../src/cycle_timer.c"
             line="48">Get the ID of clock for timestamp.</doc>
        <source-position filename="../src/cycle_timer.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cycle_timer.c"
                 line="50">A #HinokoCycleTimer.</doc>
            <type name="CycleTimer" c:type="HinokoCycleTimer*"/>
          </instance-parameter>
          <parameter name="clock_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/cycle_timer.c"
                 line="51">The numerical ID of clock source for the reference
           timestamp. One CLOCK_REALTIME(0), CLOCK_MONOTONIC(1), and
           CLOCK_MONOTONIC_RAW(4) is available in UAPI of Linux kernel.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cycle_timer"
              c:identifier="hinoko_cycle_timer_get_cycle_timer">
        <doc xml:space="preserve"
             filename="../src/cycle_timer.c"
             line="62">Get the value of cycle timer in 1394 OHCI controller.</doc>
        <source-position filename="../src/cycle_timer.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cycle_timer.c"
                 line="64">A #HinokoCycleTimer.</doc>
            <type name="CycleTimer" c:type="HinokoCycleTimer*"/>
          </instance-parameter>
          <parameter name="cycle_timer"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cycle_timer.c"
                 line="65">The value of cycle
		 timer register of 1394 OHCI, including three elements; second,
		 cycle and offset.</doc>
            <array zero-terminated="0" c:type="guint16*" fixed-size="3">
              <type name="guint16" c:type="guint16"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_timestamp"
              c:identifier="hinoko_cycle_timer_get_timestamp">
        <doc xml:space="preserve"
             filename="../src/cycle_timer.c"
             line="32">Get timestamp with enough sizee of strorage. The timestamp refers to
clock_id available by hinoko_cycle_timer_get_clock_id().</doc>
        <source-position filename="../src/cycle_timer.h" line="22"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/cycle_timer.c"
                 line="34">A #HinokoCycleTimer.</doc>
            <type name="CycleTimer" c:type="HinokoCycleTimer*"/>
          </instance-parameter>
          <parameter name="tv_sec"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/cycle_timer.c"
                 line="35">The second part of timestamp.</doc>
            <type name="gint64" c:type="gint64*"/>
          </parameter>
          <parameter name="tv_nsec"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/cycle_timer.c"
                 line="36">The nanosecond part of timestamp.</doc>
            <type name="gint32" c:type="gint32*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <function-macro name="FW_ISO_CTX"
                    c:identifier="HINOKO_FW_ISO_CTX"
                    introspectable="0">
      <source-position filename="../src/fw_iso_ctx.h" line="15"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FW_ISO_CTX_CLASS"
                    c:identifier="HINOKO_FW_ISO_CTX_CLASS"
                    introspectable="0">
      <source-position filename="../src/fw_iso_ctx.h" line="23"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FW_ISO_CTX_GET_CLASS"
                    c:identifier="HINOKO_FW_ISO_CTX_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/fw_iso_ctx.h" line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FW_ISO_RESOURCE"
                    c:identifier="HINOKO_FW_ISO_RESOURCE"
                    introspectable="0">
      <source-position filename="../src/fw_iso_resource.h" line="14"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FW_ISO_RESOURCE_AUTO"
                    c:identifier="HINOKO_FW_ISO_RESOURCE_AUTO"
                    introspectable="0">
      <source-position filename="../src/fw_iso_resource_auto.h" line="14"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FW_ISO_RESOURCE_AUTO_CLASS"
                    c:identifier="HINOKO_FW_ISO_RESOURCE_AUTO_CLASS"
                    introspectable="0">
      <source-position filename="../src/fw_iso_resource_auto.h" line="22"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FW_ISO_RESOURCE_AUTO_GET_CLASS"
                    c:identifier="HINOKO_FW_ISO_RESOURCE_AUTO_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/fw_iso_resource_auto.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FW_ISO_RESOURCE_CLASS"
                    c:identifier="HINOKO_FW_ISO_RESOURCE_CLASS"
                    introspectable="0">
      <source-position filename="../src/fw_iso_resource.h" line="22"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FW_ISO_RESOURCE_GET_CLASS"
                    c:identifier="HINOKO_FW_ISO_RESOURCE_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/fw_iso_resource.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FW_ISO_RX_MULTIPLE"
                    c:identifier="HINOKO_FW_ISO_RX_MULTIPLE"
                    introspectable="0">
      <source-position filename="../src/fw_iso_rx_multiple.h" line="15"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FW_ISO_RX_MULTIPLE_CLASS"
                    c:identifier="HINOKO_FW_ISO_RX_MULTIPLE_CLASS"
                    introspectable="0">
      <source-position filename="../src/fw_iso_rx_multiple.h" line="23"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FW_ISO_RX_MULTIPLE_GET_CLASS"
                    c:identifier="HINOKO_FW_ISO_RX_MULTIPLE_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/fw_iso_rx_multiple.h" line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FW_ISO_RX_SINGLE"
                    c:identifier="HINOKO_FW_ISO_RX_SINGLE"
                    introspectable="0">
      <source-position filename="../src/fw_iso_rx_single.h" line="15"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FW_ISO_RX_SINGLE_CLASS"
                    c:identifier="HINOKO_FW_ISO_RX_SINGLE_CLASS"
                    introspectable="0">
      <source-position filename="../src/fw_iso_rx_single.h" line="23"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FW_ISO_RX_SINGLE_GET_CLASS"
                    c:identifier="HINOKO_FW_ISO_RX_SINGLE_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/fw_iso_rx_single.h" line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FW_ISO_TX"
                    c:identifier="HINOKO_FW_ISO_TX"
                    introspectable="0">
      <source-position filename="../src/fw_iso_tx.h" line="15"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FW_ISO_TX_CLASS"
                    c:identifier="HINOKO_FW_ISO_TX_CLASS"
                    introspectable="0">
      <source-position filename="../src/fw_iso_tx.h" line="23"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FW_ISO_TX_GET_CLASS"
                    c:identifier="HINOKO_FW_ISO_TX_GET_CLASS"
                    introspectable="0">
      <source-position filename="../src/fw_iso_tx.h" line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="FwIsoCtx"
           c:symbol-prefix="fw_iso_ctx"
           c:type="HinokoFwIsoCtx"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="HinokoFwIsoCtx"
           glib:get-type="hinoko_fw_iso_ctx_get_type"
           glib:type-struct="FwIsoCtxClass">
      <source-position filename="../src/fw_iso_ctx.h" line="61"/>
      <virtual-method name="stopped">
        <doc xml:space="preserve"
             filename="../src/fw_iso_ctx.h"
             line="52">When isochronous context is stopped, #HinokoFwIsoCtxClass::stopped
handler is called. When any error occurs, it's reported.</doc>
        <source-position filename="../src/fw_iso_ctx.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_ctx.h"
                 line="54">A #HinokoFwIsoCtx.</doc>
            <type name="FwIsoCtx" c:type="HinokoFwIsoCtx*"/>
          </instance-parameter>
          <parameter name="error"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_ctx.h"
                 line="55">A #GError.</doc>
            <type name="GLib.Error" c:type="GError*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="create_source"
              c:identifier="hinoko_fw_iso_ctx_create_source"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_ctx.c"
             line="800">Create Gsource for GMainContext to dispatch events for isochronous context.</doc>
        <source-position filename="../src/fw_iso_ctx.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_ctx.c"
                 line="802">A #hinokoFwIsoCtx.</doc>
            <type name="FwIsoCtx" c:type="HinokoFwIsoCtx*"/>
          </instance-parameter>
          <parameter name="gsrc"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_ctx.c"
                 line="803">A #GSource.</doc>
            <type name="GLib.Source" c:type="GSource**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cycle_timer"
              c:identifier="hinoko_fw_iso_ctx_get_cycle_timer"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_ctx.c"
             line="403">Retrieve the value of cycle timer register. This method call is available
once any isochronous context is created.</doc>
        <source-position filename="../src/fw_iso_ctx.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_ctx.c"
                 line="405">A #HinokoFwIsoCtx.</doc>
            <type name="FwIsoCtx" c:type="HinokoFwIsoCtx*"/>
          </instance-parameter>
          <parameter name="clock_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_ctx.c"
                 line="406">The numerical ID of clock source for the reference timestamp. One
           CLOCK_REALTIME(0), CLOCK_MONOTONIC(1), and CLOCK_MONOTONIC_RAW(2)
           is available in UAPI of Linux kernel.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cycle_timer"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_ctx.c"
                 line="409">A #HinokoCycleTimer to store data of cycle timer.</doc>
            <type name="CycleTimer" c:type="HinokoCycleTimer* const*"/>
          </parameter>
        </parameters>
      </method>
      <property name="bytes-per-chunk" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="chunks-per-buffer" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="registered-chunk-count" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="FwIsoCtxPrivate" c:type="HinokoFwIsoCtxPrivate*"/>
      </field>
      <glib:signal name="stopped" when="last">
        <doc xml:space="preserve"
             filename="../src/fw_iso_ctx.c"
             line="169">When isochronous context is stopped, #HinokoFwIsoCtx::stopped is
emitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="error"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_ctx.c"
                 line="172">A #GError.</doc>
            <type name="GLib.Error"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="FwIsoCtxClass"
            c:type="HinokoFwIsoCtxClass"
            glib:is-gtype-struct-for="FwIsoCtx">
      <source-position filename="../src/fw_iso_ctx.h" line="61"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="stopped">
        <callback name="stopped">
          <source-position filename="../src/fw_iso_ctx.h" line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_ctx.h"
                   line="54">A #HinokoFwIsoCtx.</doc>
              <type name="FwIsoCtx" c:type="HinokoFwIsoCtx*"/>
            </parameter>
            <parameter name="error"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_ctx.h"
                   line="55">A #GError.</doc>
              <type name="GLib.Error" c:type="GError*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="FwIsoCtxError"
                 glib:type-name="HinokoFwIsoCtxError"
                 glib:get-type="hinoko_fw_iso_ctx_error_get_type"
                 c:type="HinokoFwIsoCtxError"
                 glib:error-domain="hinoko-fw-iso-ctx-error-quark">
      <doc xml:space="preserve"
           filename="../src/hinoko_enum_types.h"
           line="100">A set of error code for GError with domain which equals to #hinoko_fw_iso_ctx_error_quark();</doc>
      <member name="failed"
              value="0"
              c:identifier="HINOKO_FW_ISO_CTX_ERROR_FAILED"
              glib:nick="failed">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="102">The system call fails.</doc>
      </member>
      <member name="allocated"
              value="1"
              c:identifier="HINOKO_FW_ISO_CTX_ERROR_ALLOCATED"
              glib:nick="allocated">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="103">The instance is already associated to any firewire
	        			character device.</doc>
      </member>
      <member name="not_allocated"
              value="2"
              c:identifier="HINOKO_FW_ISO_CTX_ERROR_NOT_ALLOCATED"
              glib:nick="not-allocated">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="105">The instance is not associated to any firewire
					character device.</doc>
      </member>
      <member name="mapped"
              value="3"
              c:identifier="HINOKO_FW_ISO_CTX_ERROR_MAPPED"
              glib:nick="mapped">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="107">The intermediate buffer is already mapped to the
					process.</doc>
      </member>
      <member name="not_mapped"
              value="4"
              c:identifier="HINOKO_FW_ISO_CTX_ERROR_NOT_MAPPED"
              glib:nick="not-mapped">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="109">The intermediate buffer is not mapped to the
					process.</doc>
      </member>
      <member name="chunk_unregistered"
              value="5"
              c:identifier="HINOKO_FW_ISO_CTX_ERROR_CHUNK_UNREGISTERED"
              glib:nick="chunk-unregistered">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="111">No chunk registered before starting.</doc>
      </member>
      <member name="no_isoc_channel"
              value="6"
              c:identifier="HINOKO_FW_ISO_CTX_ERROR_NO_ISOC_CHANNEL"
              glib:nick="no-isoc-channel">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="112">No isochronous channel is available.</doc>
      </member>
      <function name="quark" c:identifier="hinoko_fw_iso_ctx_error_quark">
        <doc xml:space="preserve"
             filename="../src/fw_iso_ctx.c"
             line="48">Return the GQuark for error domain of GError which has code in #HinokoFwIsoCtxError.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/fw_iso_ctx.c"
               line="53">A #GQuark.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <bitfield name="FwIsoCtxMatchFlag"
              glib:type-name="HinokoFwIsoCtxMatchFlag"
              glib:get-type="hinoko_fw_iso_ctx_match_flag_get_type"
              c:type="HinokoFwIsoCtxMatchFlag">
      <doc xml:space="preserve"
           filename="../src/hinoko_enum_types.h"
           line="44">A representation of tag field of isochronous packet on IEEE 1394 bus.</doc>
      <member name="tag0"
              value="1"
              c:identifier="HINOKO_FW_ISO_CTX_MATCH_FLAG_TAG0"
              glib:nick="tag0">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="46">The value of tag0 in 1394 OHCI.</doc>
      </member>
      <member name="tag1"
              value="2"
              c:identifier="HINOKO_FW_ISO_CTX_MATCH_FLAG_TAG1"
              glib:nick="tag1">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="47">The value of tag1 in 1394 OHCI.</doc>
      </member>
      <member name="tag2"
              value="4"
              c:identifier="HINOKO_FW_ISO_CTX_MATCH_FLAG_TAG2"
              glib:nick="tag2">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="48">The value of tag2 in 1394 OHCI.</doc>
      </member>
      <member name="tag3"
              value="8"
              c:identifier="HINOKO_FW_ISO_CTX_MATCH_FLAG_TAG3"
              glib:nick="tag3">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="49">The value of tag3 in 1394 OHCI.</doc>
      </member>
    </bitfield>
    <enumeration name="FwIsoCtxMode"
                 glib:type-name="HinokoFwIsoCtxMode"
                 glib:get-type="hinoko_fw_iso_ctx_mode_get_type"
                 c:type="HinokoFwIsoCtxMode">
      <doc xml:space="preserve"
           filename="../src/hinoko_enum_types.h"
           line="8">A representation of mode for isochronous context of Linux FireWire subsystem.</doc>
      <member name="tx"
              value="0"
              c:identifier="HINOKO_FW_ISO_CTX_MODE_TX"
              glib:nick="tx">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="10">The mode of IT context of 1394 OHCI.</doc>
      </member>
      <member name="rx_single"
              value="1"
              c:identifier="HINOKO_FW_ISO_CTX_MODE_RX_SINGLE"
              glib:nick="rx-single">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="11">The mode of IR context of 1394 OHCI with
				packer-per-buffer protocol</doc>
      </member>
      <member name="rx_multiple"
              value="2"
              c:identifier="HINOKO_FW_ISO_CTX_MODE_RX_MULTIPLE"
              glib:nick="rx-multiple">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="13">The mode of IR context of 1394 OHCI with
				buffer-fill protocol.</doc>
      </member>
    </enumeration>
    <record name="FwIsoCtxPrivate"
            c:type="HinokoFwIsoCtxPrivate"
            disguised="1">
      <source-position filename="../src/fw_iso_ctx.h" line="41"/>
    </record>
    <class name="FwIsoResource"
           c:symbol-prefix="fw_iso_resource"
           c:type="HinokoFwIsoResource"
           parent="GObject.Object"
           glib:type-name="HinokoFwIsoResource"
           glib:get-type="hinoko_fw_iso_resource_get_type"
           glib:type-struct="FwIsoResourceClass">
      <source-position filename="../src/fw_iso_resource.h" line="80"/>
      <constructor name="new" c:identifier="hinoko_fw_iso_resource_new">
        <doc xml:space="preserve"
             filename="../src/fw_iso_resource.c"
             line="147">Allocate and return an instance of #HinokoFwIsoResource.</doc>
        <source-position filename="../src/fw_iso_resource.h" line="84"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/fw_iso_resource.c"
               line="152">A #HinokoFwIsoResource.</doc>
          <type name="FwIsoResource" c:type="HinokoFwIsoResource*"/>
        </return-value>
      </constructor>
      <function name="calculate_bandwidth"
                c:identifier="hinoko_fw_iso_resource_calculate_bandwidth">
        <doc xml:space="preserve"
             filename="../src/fw_iso_resource.c"
             line="598">Calculate the amount of bandwidth expected to be consumed in allocation unit
by given parameters.</doc>
        <source-position filename="../src/fw_iso_resource.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/fw_iso_resource.c"
               line="606">The amount of bandwidth expected to be consumed.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="bytes_per_payload" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="600">The number of bytes in payload of isochronous packet.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="scode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="601">The speed of transmission.</doc>
            <type name="FwScode" c:type="HinokoFwScode"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="allocated">
        <doc xml:space="preserve"
             filename="../src/fw_iso_resource.h"
             line="51">When allocation of isochronous resource finishes, the #HinokoFwIsoResourceClass::allocated
handler is called to notify the result, channel, and bandwidth.</doc>
        <source-position filename="../src/fw_iso_resource.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.h"
                 line="53">A #HinokoFwIsoResource.</doc>
            <type name="FwIsoResource" c:type="HinokoFwIsoResource*"/>
          </instance-parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.h"
                 line="54">The deallocated channel number.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="bandwidth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.h"
                 line="55">The deallocated amount of bandwidth.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.h"
                 line="56">A #GError. Error can be generated with domain of
   #hinoko_fw_iso_resource_error_quark() and code of
   #HINOKO_FW_ISO_RESOURCE_ERROR_EVENT.</doc>
            <type name="GLib.Error" c:type="const GError*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="deallocated">
        <doc xml:space="preserve"
             filename="../src/fw_iso_resource.h"
             line="66">When deallocation of isochronous resource finishes, the #HinokoFwIsoResourceClass::deallocated
handler is called to notify the result, channel, and bandwidth.</doc>
        <source-position filename="../src/fw_iso_resource.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.h"
                 line="68">A #HinokoFwIsoResource.</doc>
            <type name="FwIsoResource" c:type="HinokoFwIsoResource*"/>
          </instance-parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.h"
                 line="69">The deallocated channel number.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="bandwidth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.h"
                 line="70">The deallocated amount of bandwidth.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.h"
                 line="71">A #GError. Error can be generated with domain of
   #hinoko_fw_iso_resource_error_quark() and code of
   #HINOKO_FW_ISO_RESOURCE_ERROR_EVENT.</doc>
            <type name="GLib.Error" c:type="GError*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="allocate_once_async"
              c:identifier="hinoko_fw_iso_resource_allocate_once_async"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_resource.c"
             line="197">Initiate allocation of isochronous resource without any wait. When the
allocation finishes, #HinokoFwIsoResource::allocated signal is emit to notify the result,
channel, and bandwidth.</doc>
        <source-position filename="../src/fw_iso_resource.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="199">A #HinokoFwIsoResource.</doc>
            <type name="FwIsoResource" c:type="HinokoFwIsoResource*"/>
          </instance-parameter>
          <parameter name="channel_candidates" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="200">The array with
		elements for numerical number for isochronous channel
		to be allocated.</doc>
            <array length="1" zero-terminated="0" c:type="guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="channel_candidates_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="203">The number of channel candidates.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="bandwidth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="204">The amount of bandwidth to be allocated.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="allocate_once_sync"
              c:identifier="hinoko_fw_iso_resource_allocate_once_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_resource.c"
             line="305">Initiate allocation of isochronous resource and wait for #HinokoFwIsoResource::allocated signal.</doc>
        <source-position filename="../src/fw_iso_resource.h" line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="307">A #HinokoFwIsoResource.</doc>
            <type name="FwIsoResource" c:type="HinokoFwIsoResource*"/>
          </instance-parameter>
          <parameter name="channel_candidates" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="308">The array with
		elements for numerical number for isochronous channel
		to be allocated.</doc>
            <array length="1" zero-terminated="0" c:type="guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="channel_candidates_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="311">The number of channel candidates.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="bandwidth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="312">The amount of bandwidth to be allocated.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_source"
              c:identifier="hinoko_fw_iso_resource_create_source"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_resource.c"
             line="558">Create Gsource for GMainContext to dispatch events for isochronous resource.</doc>
        <source-position filename="../src/fw_iso_resource.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="560">A #hinokoFwIsoResource.</doc>
            <type name="FwIsoResource" c:type="HinokoFwIsoResource*"/>
          </instance-parameter>
          <parameter name="gsrc"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="561">A #GSource.</doc>
            <type name="GLib.Source" c:type="GSource**"/>
          </parameter>
        </parameters>
      </method>
      <method name="deallocate_once_async"
              c:identifier="hinoko_fw_iso_resource_deallocate_once_async"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_resource.c"
             line="245">Initiate deallocation of isochronous resource without any wait. When the
deallocation finishes, #HinokoFwIsoResource::deallocated signal is emit to notify the result,
channel, and bandwidth.</doc>
        <source-position filename="../src/fw_iso_resource.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="247">A #HinokoFwIsoResource.</doc>
            <type name="FwIsoResource" c:type="HinokoFwIsoResource*"/>
          </instance-parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="248">The channel number to be deallocated.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="bandwidth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="249">The amount of bandwidth to be deallocated.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="deallocate_once_sync"
              c:identifier="hinoko_fw_iso_resource_deallocate_once_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_resource.c"
             line="364">Initiate deallocation of isochronous resource. When the deallocation is done,
#HinokoFwIsoResource::deallocated signal is emit to notify the result, channel, and bandwidth.</doc>
        <source-position filename="../src/fw_iso_resource.h" line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="366">A #HinokoFwIsoResource.</doc>
            <type name="FwIsoResource" c:type="HinokoFwIsoResource*"/>
          </instance-parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="367">The channel number to be deallocated.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="bandwidth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="368">The amount of bandwidth to be deallocated.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="open"
              c:identifier="hinoko_fw_iso_resource_open"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_resource.c"
             line="159">Open Linux FireWire character device to delegate any request for isochronous
resource management to Linux FireWire subsystem.</doc>
        <source-position filename="../src/fw_iso_resource.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="161">A #HinokoFwIsoResource.</doc>
            <type name="FwIsoResource" c:type="HinokoFwIsoResource*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="162">A path of any Linux FireWire character device.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="open_flag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="163">The flag of open(2) system call. O_RDONLY is forced to fulfil
       internally.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="FwIsoResourcePrivate"
              c:type="HinokoFwIsoResourcePrivate*"/>
      </field>
      <glib:signal name="allocated" when="last">
        <doc xml:space="preserve"
             filename="../src/fw_iso_resource.c"
             line="95">When allocation of isochronous resource finishes, the #HinokoFwIsoResource::allocated
handler is called to notify the result, channel, and bandwidth.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="98">The deallocated channel number.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="bandwidth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="99">The deallocated amount of bandwidth.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="100">A #GError. Error can be generated with domain of
   #hinoko_fw_iso_resource_error_quark() and code of
   #HINOKO_FW_ISO_RESOURCE_ERROR_EVENT.</doc>
            <type name="GLib.Error"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="deallocated" when="last">
        <doc xml:space="preserve"
             filename="../src/fw_iso_resource.c"
             line="117">When deallocation of isochronous resource finishes, the #HinokoFwIsoResource::deallocated
handler is called to notify the result, channel, and bandwidth.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="120">The deallocated channel number.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="bandwidth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="121">The deallocated amount of bandwidth.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource.c"
                 line="122">A #GError. Error can be generated with domain of
   #hinoko_fw_iso_resource_error_quark() and code of
   #HINOKO_FW_ISO_RESOURCE_ERROR_EVENT.</doc>
            <type name="GLib.Error"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="FwIsoResourceAuto"
           c:symbol-prefix="fw_iso_resource_auto"
           c:type="HinokoFwIsoResourceAuto"
           parent="FwIsoResource"
           glib:type-name="HinokoFwIsoResourceAuto"
           glib:get-type="hinoko_fw_iso_resource_auto_get_type"
           glib:type-struct="FwIsoResourceAutoClass">
      <source-position filename="../src/fw_iso_resource_auto.h" line="50"/>
      <constructor name="new" c:identifier="hinoko_fw_iso_resource_auto_new">
        <source-position filename="../src/fw_iso_resource_auto.h" line="54"/>
        <return-value transfer-ownership="full">
          <type name="FwIsoResourceAuto" c:type="HinokoFwIsoResourceAuto*"/>
        </return-value>
      </constructor>
      <method name="allocate_async"
              c:identifier="hinoko_fw_iso_resource_auto_allocate_async"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_resource_auto.c"
             line="133">Initiate allocation of isochronous resource. When the allocation is done,
#HinokoFwIsoResource::allocated signal is emit to notify the result, channel, and bandwidth.</doc>
        <source-position filename="../src/fw_iso_resource_auto.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource_auto.c"
                 line="135">A #HinokoFwIsoResourceAuto.</doc>
            <type name="FwIsoResourceAuto" c:type="HinokoFwIsoResourceAuto*"/>
          </instance-parameter>
          <parameter name="channel_candidates" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource_auto.c"
                 line="136">The array with
		elements for numerical number for isochronous channel
		to be allocated.</doc>
            <array length="1" zero-terminated="0" c:type="guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="channel_candidates_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource_auto.c"
                 line="139">The number of channel candidates.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="bandwidth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource_auto.c"
                 line="140">The amount of bandwidth to be allocated.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="allocate_sync"
              c:identifier="hinoko_fw_iso_resource_auto_allocate_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_resource_auto.c"
             line="245">Initiate allocation of isochronous resource and wait for #HinokoFwIsoResource::allocated signal.
When the call is successful, #HinokoFwIsoResourceAuto:channel and #HinokoFwIsoResourceAuto:bandwidth
properties are available.</doc>
        <source-position filename="../src/fw_iso_resource_auto.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource_auto.c"
                 line="247">A #HinokoFwIsoResourceAuto.</doc>
            <type name="FwIsoResourceAuto" c:type="HinokoFwIsoResourceAuto*"/>
          </instance-parameter>
          <parameter name="channel_candidates" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource_auto.c"
                 line="248">The array with
		elements for numerical number for isochronous channel
		to be allocated.</doc>
            <array length="1" zero-terminated="0" c:type="guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="channel_candidates_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource_auto.c"
                 line="251">The number of channel candidates.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="bandwidth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource_auto.c"
                 line="252">The amount of bandwidth to be allocated.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="deallocate_async"
              c:identifier="hinoko_fw_iso_resource_auto_deallocate_async"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_resource_auto.c"
             line="188">Initiate deallocation of isochronous resource. When the deallocation is done,
#HinokoFwIsoResource::deallocated signal is emit to notify the result, channel, and bandwidth.</doc>
        <source-position filename="../src/fw_iso_resource_auto.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource_auto.c"
                 line="190">A #HinokoFwIsoResourceAuto.</doc>
            <type name="FwIsoResourceAuto" c:type="HinokoFwIsoResourceAuto*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="deallocate_sync"
              c:identifier="hinoko_fw_iso_resource_auto_deallocate_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_resource_auto.c"
             line="306">Initiate deallocation of isochronous resource. When the deallocation is done,
#HinokoFwIsoResource::deallocated signal is emit to notify the result, channel, and bandwidth.</doc>
        <source-position filename="../src/fw_iso_resource_auto.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_resource_auto.c"
                 line="308">A #HinokoFwIsoResourceAuto.</doc>
            <type name="FwIsoResourceAuto" c:type="HinokoFwIsoResourceAuto*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="allocated" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="bandwidth" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="channel" transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="FwIsoResource" c:type="HinokoFwIsoResource"/>
      </field>
      <field name="priv">
        <type name="FwIsoResourceAutoPrivate"
              c:type="HinokoFwIsoResourceAutoPrivate*"/>
      </field>
    </class>
    <record name="FwIsoResourceAutoClass"
            c:type="HinokoFwIsoResourceAutoClass"
            glib:is-gtype-struct-for="FwIsoResourceAuto">
      <source-position filename="../src/fw_iso_resource_auto.h" line="50"/>
      <field name="parent_class">
        <type name="FwIsoResourceClass" c:type="HinokoFwIsoResourceClass"/>
      </field>
    </record>
    <enumeration name="FwIsoResourceAutoError"
                 glib:type-name="HinokoFwIsoResourceAutoError"
                 glib:get-type="hinoko_fw_iso_resource_auto_error_get_type"
                 c:type="HinokoFwIsoResourceAutoError"
                 glib:error-domain="hinoko-fw-iso-resource-auto-error-quark">
      <doc xml:space="preserve"
           filename="../src/hinoko_enum_types.h"
           line="81">A set of error code for GError with domain which equals to #hinoko_fw_iso_resource_error_quark();</doc>
      <member name="failed"
              value="0"
              c:identifier="HINOKO_FW_ISO_RESOURCE_AUTO_ERROR_FAILED"
              glib:nick="failed">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="83">The system call fails.</doc>
      </member>
      <member name="allocated"
              value="1"
              c:identifier="HINOKO_FW_ISO_RESOURCE_AUTO_ERROR_ALLOCATED"
              glib:nick="allocated">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="84">The instance is already associated to
						allocated isochronous resources.</doc>
      </member>
      <member name="not_allocated"
              value="2"
              c:identifier="HINOKO_FW_ISO_RESOURCE_AUTO_ERROR_NOT_ALLOCATED"
              glib:nick="not-allocated">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="86">The instance is not associated to allocated
						isochronous resources.</doc>
      </member>
      <member name="timeout"
              value="3"
              c:identifier="HINOKO_FW_ISO_RESOURCE_AUTO_ERROR_TIMEOUT"
              glib:nick="timeout">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="88">No event to the request arrives within
						timeout.</doc>
      </member>
      <function name="quark"
                c:identifier="hinoko_fw_iso_resource_auto_error_quark">
        <doc xml:space="preserve"
             filename="../src/fw_iso_resource_auto.c"
             line="29">Return the GQuark for error domain of GError which has code in #HinokoFwIsoResourceAutoError.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/fw_iso_resource_auto.c"
               line="34">A #GQuark.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <record name="FwIsoResourceAutoPrivate"
            c:type="HinokoFwIsoResourceAutoPrivate"
            disguised="1">
      <source-position filename="../src/fw_iso_resource_auto.h" line="40"/>
    </record>
    <record name="FwIsoResourceClass"
            c:type="HinokoFwIsoResourceClass"
            glib:is-gtype-struct-for="FwIsoResource">
      <source-position filename="../src/fw_iso_resource.h" line="80"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="allocated">
        <callback name="allocated">
          <source-position filename="../src/fw_iso_resource.h" line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_resource.h"
                   line="53">A #HinokoFwIsoResource.</doc>
              <type name="FwIsoResource" c:type="HinokoFwIsoResource*"/>
            </parameter>
            <parameter name="channel" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_resource.h"
                   line="54">The deallocated channel number.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="bandwidth" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_resource.h"
                   line="55">The deallocated amount of bandwidth.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_resource.h"
                   line="56">A #GError. Error can be generated with domain of
   #hinoko_fw_iso_resource_error_quark() and code of
   #HINOKO_FW_ISO_RESOURCE_ERROR_EVENT.</doc>
              <type name="GLib.Error" c:type="const GError*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="deallocated">
        <callback name="deallocated">
          <source-position filename="../src/fw_iso_resource.h" line="78"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_resource.h"
                   line="68">A #HinokoFwIsoResource.</doc>
              <type name="FwIsoResource" c:type="HinokoFwIsoResource*"/>
            </parameter>
            <parameter name="channel" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_resource.h"
                   line="69">The deallocated channel number.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="bandwidth" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_resource.h"
                   line="70">The deallocated amount of bandwidth.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_resource.h"
                   line="71">A #GError. Error can be generated with domain of
   #hinoko_fw_iso_resource_error_quark() and code of
   #HINOKO_FW_ISO_RESOURCE_ERROR_EVENT.</doc>
              <type name="GLib.Error" c:type="GError*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="FwIsoResourceError"
                 glib:type-name="HinokoFwIsoResourceError"
                 glib:get-type="hinoko_fw_iso_resource_error_get_type"
                 c:type="HinokoFwIsoResourceError"
                 glib:error-domain="hinoko-fw-iso-resource-error-quark">
      <doc xml:space="preserve"
           filename="../src/hinoko_enum_types.h"
           line="61">A set of error code for GError with domain which equals to #hinoko_fw_iso_resource_error_quark();</doc>
      <member name="failed"
              value="0"
              c:identifier="HINOKO_FW_ISO_RESOURCE_ERROR_FAILED"
              glib:nick="failed">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="63">The system call fails.</doc>
      </member>
      <member name="opened"
              value="1"
              c:identifier="HINOKO_FW_ISO_RESOURCE_ERROR_OPENED"
              glib:nick="opened">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="64">The instance is already associated to any firewire
					character device.</doc>
      </member>
      <member name="not_opened"
              value="2"
              c:identifier="HINOKO_FW_ISO_RESOURCE_ERROR_NOT_OPENED"
              glib:nick="not-opened">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="66">The instance is not associated to any firewire
					character device.</doc>
      </member>
      <member name="timeout"
              value="3"
              c:identifier="HINOKO_FW_ISO_RESOURCE_ERROR_TIMEOUT"
              glib:nick="timeout">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="68">No event to the request arrives within timeout.</doc>
      </member>
      <member name="event"
              value="4"
              c:identifier="HINOKO_FW_ISO_RESOURCE_ERROR_EVENT"
              glib:nick="event">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="69">Event for the request arrives but includes error code.</doc>
      </member>
      <function name="quark" c:identifier="hinoko_fw_iso_resource_error_quark">
        <doc xml:space="preserve"
             filename="../src/fw_iso_resource.c"
             line="28">Return the GQuark for error domain of GError which has code in #HinokoFwIsoResourceError.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../src/fw_iso_resource.c"
               line="33">A #GQuark.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <record name="FwIsoResourcePrivate"
            c:type="HinokoFwIsoResourcePrivate"
            disguised="1">
      <source-position filename="../src/fw_iso_resource.h" line="40"/>
    </record>
    <class name="FwIsoRxMultiple"
           c:symbol-prefix="fw_iso_rx_multiple"
           c:type="HinokoFwIsoRxMultiple"
           parent="FwIsoCtx"
           glib:type-name="HinokoFwIsoRxMultiple"
           glib:get-type="hinoko_fw_iso_rx_multiple_get_type"
           glib:type-struct="FwIsoRxMultipleClass">
      <source-position filename="../src/fw_iso_rx_multiple.h" line="59"/>
      <constructor name="new" c:identifier="hinoko_fw_iso_rx_multiple_new">
        <doc xml:space="preserve"
             filename="../src/fw_iso_rx_multiple.c"
             line="122">Instantiate #HinokoFwIsoRxMultiple object and return the instance.</doc>
        <source-position filename="../src/fw_iso_rx_multiple.h" line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/fw_iso_rx_multiple.c"
               line="127">an instance of #HinokoFwIsoRxMultiple.</doc>
          <type name="FwIsoRxMultiple" c:type="HinokoFwIsoRxMultiple*"/>
        </return-value>
      </constructor>
      <virtual-method name="interrupted">
        <doc xml:space="preserve"
             filename="../src/fw_iso_rx_multiple.h"
             line="48">When any packet is available, the handler of
#HinokoFwIsoRxMultipleClass::interrupted is called with the number of
available packets. In the handler, payload of received packet is
available by a call of #hinoko_fw_iso_rx_multiple_get_payload().</doc>
        <source-position filename="../src/fw_iso_rx_multiple.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.h"
                 line="50">A #HinokoFwIsoRxMultiple.</doc>
            <type name="FwIsoRxMultiple" c:type="HinokoFwIsoRxMultiple*"/>
          </instance-parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.h"
                 line="51">The number of packets available in this interrupt.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="allocate"
              c:identifier="hinoko_fw_iso_rx_multiple_allocate"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_rx_multiple.c"
             line="134">Allocate an IR context to 1394 OHCI controller for buffer-fill mode.
A local node of the node corresponding to the given path is used as the
controller, thus any path is accepted as long as process has enough
permission for the path.</doc>
        <source-position filename="../src/fw_iso_rx_multiple.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.c"
                 line="136">A #HinokoFwIsoRxMultiple.</doc>
            <type name="FwIsoRxMultiple" c:type="HinokoFwIsoRxMultiple*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.c"
                 line="137">A path to any Linux FireWire character device.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="channels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.c"
                 line="138">an array
      for channels to listen to.</doc>
            <array length="2" zero-terminated="0" c:type="const guint8*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="channels_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.c"
                 line="140">The length of @channels.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_payload"
              c:identifier="hinoko_fw_iso_rx_multiple_get_payload"
              throws="1">
        <source-position filename="../src/fw_iso_rx_multiple.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.c"
                 line="440">A #HinokoFwIsoRxMultiple.</doc>
            <type name="FwIsoRxMultiple" c:type="HinokoFwIsoRxMultiple*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.c"
                 line="441">the index of packet available in this interrupt.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="payload"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.c"
                 line="442">The array with data
	     frame for payload of IR context.</doc>
            <array length="2" zero-terminated="0" c:type="const guint8**">
              <type name="guint8" c:type="guint8*"/>
            </array>
          </parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.c"
                 line="444">The number of bytes in the above @payload.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="map_buffer"
              c:identifier="hinoko_fw_iso_rx_multiple_map_buffer"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_rx_multiple.c"
             line="221">Map an intermediate buffer to share payload of IR context with 1394 OHCI
controller.</doc>
        <source-position filename="../src/fw_iso_rx_multiple.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.c"
                 line="223">A #HinokoFwIsoRxMultiple.</doc>
            <type name="FwIsoRxMultiple" c:type="HinokoFwIsoRxMultiple*"/>
          </instance-parameter>
          <parameter name="bytes_per_chunk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.c"
                 line="224">The maximum number of bytes for payload of isochronous
	     packet (not payload for isochronous context).</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="chunks_per_buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.c"
                 line="226">The number of chunks in buffer.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="release" c:identifier="hinoko_fw_iso_rx_multiple_release">
        <doc xml:space="preserve"
             filename="../src/fw_iso_rx_multiple.c"
             line="199">Release allocated IR context from 1394 OHCI controller.</doc>
        <source-position filename="../src/fw_iso_rx_multiple.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.c"
                 line="201">A #HinokoFwIsoRxMultiple.</doc>
            <type name="FwIsoRxMultiple" c:type="HinokoFwIsoRxMultiple*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="start"
              c:identifier="hinoko_fw_iso_rx_multiple_start"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_rx_multiple.c"
             line="299">Start IR context.</doc>
        <source-position filename="../src/fw_iso_rx_multiple.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.c"
                 line="301">A #HinokoFwIsoRxMultiple.</doc>
            <type name="FwIsoRxMultiple" c:type="HinokoFwIsoRxMultiple*"/>
          </instance-parameter>
          <parameter name="cycle_match"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.c"
                 line="302">
		 The isochronous cycle to start packet processing. The first
		 element should be the second part of isochronous cycle, up to
		 3. The second element should be the cycle part of isochronous
		 cycle, up to 7999.</doc>
            <array zero-terminated="0" c:type="const guint16*" fixed-size="2">
              <type name="guint16"/>
            </array>
          </parameter>
          <parameter name="sync" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.c"
                 line="307">The value of sync field in isochronous header for packet processing,
	  up to 15.</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="tags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.c"
                 line="309">The value of tag field in isochronous header for packet processing.</doc>
            <type name="FwIsoCtxMatchFlag" c:type="HinokoFwIsoCtxMatchFlag"/>
          </parameter>
          <parameter name="chunks_per_irq" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.c"
                 line="310">The number of chunks per interval of interrupt.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="hinoko_fw_iso_rx_multiple_stop">
        <doc xml:space="preserve"
             filename="../src/fw_iso_rx_multiple.c"
             line="339">Stop IR context.</doc>
        <source-position filename="../src/fw_iso_rx_multiple.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.c"
                 line="341">A #HinokoFwIsoRxMultiple.</doc>
            <type name="FwIsoRxMultiple" c:type="HinokoFwIsoRxMultiple*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unmap_buffer"
              c:identifier="hinoko_fw_iso_rx_multiple_unmap_buffer">
        <doc xml:space="preserve"
             filename="../src/fw_iso_rx_multiple.c"
             line="268">Unmap intermediate buffer shard with 1394 OHCI controller for payload
of IR context.</doc>
        <source-position filename="../src/fw_iso_rx_multiple.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.c"
                 line="270">A #HinokoFwIsoRxMultiple.</doc>
            <type name="FwIsoRxMultiple" c:type="HinokoFwIsoRxMultiple*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="channels" transfer-ownership="none">
        <array name="GLib.ByteArray">
          <type name="guint8" c:type="guint8"/>
        </array>
      </property>
      <field name="parent_instance">
        <type name="FwIsoCtx" c:type="HinokoFwIsoCtx"/>
      </field>
      <field name="priv">
        <type name="FwIsoRxMultiplePrivate"
              c:type="HinokoFwIsoRxMultiplePrivate*"/>
      </field>
      <glib:signal name="interrupted" when="last">
        <doc xml:space="preserve"
             filename="../src/fw_iso_rx_multiple.c"
             line="96">When any packet is available, the #HinokoFwIsoRxMultiple::interrupted
signal is emitted with the number of available packets. In the
handler, payload of received packet is available by a call of
#hinoko_fw_iso_rx_multiple_get_payload().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_multiple.c"
                 line="99">The number of packets available in this interrupt.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="FwIsoRxMultipleClass"
            c:type="HinokoFwIsoRxMultipleClass"
            glib:is-gtype-struct-for="FwIsoRxMultiple">
      <source-position filename="../src/fw_iso_rx_multiple.h" line="59"/>
      <field name="parent_class">
        <type name="FwIsoCtxClass" c:type="HinokoFwIsoCtxClass"/>
      </field>
      <field name="interrupted">
        <callback name="interrupted">
          <source-position filename="../src/fw_iso_rx_multiple.h" line="58"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_rx_multiple.h"
                   line="50">A #HinokoFwIsoRxMultiple.</doc>
              <type name="FwIsoRxMultiple" c:type="HinokoFwIsoRxMultiple*"/>
            </parameter>
            <parameter name="count" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_rx_multiple.h"
                   line="51">The number of packets available in this interrupt.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="FwIsoRxMultiplePrivate"
            c:type="HinokoFwIsoRxMultiplePrivate"
            disguised="1">
      <source-position filename="../src/fw_iso_rx_multiple.h" line="37"/>
    </record>
    <class name="FwIsoRxSingle"
           c:symbol-prefix="fw_iso_rx_single"
           c:type="HinokoFwIsoRxSingle"
           parent="FwIsoCtx"
           glib:type-name="HinokoFwIsoRxSingle"
           glib:get-type="hinoko_fw_iso_rx_single_get_type"
           glib:type-struct="FwIsoRxSingleClass">
      <source-position filename="../src/fw_iso_rx_single.h" line="66"/>
      <constructor name="new" c:identifier="hinoko_fw_iso_rx_single_new">
        <doc xml:space="preserve"
             filename="../src/fw_iso_rx_single.c"
             line="83">Instantiate #HinokoFwIsoRxSingle object and return the instance.</doc>
        <source-position filename="../src/fw_iso_rx_single.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/fw_iso_rx_single.c"
               line="88">an instance of #HinokoFwIsoRxSingle.</doc>
          <type name="FwIsoRxSingle" c:type="HinokoFwIsoRxSingle*"/>
        </return-value>
      </constructor>
      <virtual-method name="interrupted">
        <doc xml:space="preserve"
             filename="../src/fw_iso_rx_single.h"
             line="48">When any packet is available, the
#HinokoFwIsoRxSingleClass::interrupted handler is called with header
of the packet. In the handler, payload of received packet is
available by a call of #hinoko_fw_iso_rx_single_get_payload().</doc>
        <source-position filename="../src/fw_iso_rx_single.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.h"
                 line="50">A #HinokoFwIsoRxSingle.</doc>
            <type name="FwIsoRxSingle" c:type="HinokoFwIsoRxSingle*"/>
          </instance-parameter>
          <parameter name="sec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.h"
                 line="51">sec part of isochronous cycle when interrupt occurs.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cycle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.h"
                 line="52">cycle part of of isochronous cycle when interrupt occurs.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="header" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.h"
                 line="53">The
	    headers of IR context for handled packets.</doc>
            <array length="3" zero-terminated="0" c:type="const guint8*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="header_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.h"
                 line="55">the number of bytes for @header.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.h"
                 line="56">the number of packets to handle.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="allocate"
              c:identifier="hinoko_fw_iso_rx_single_allocate"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_rx_single.c"
             line="95">Allocate an IR context to 1394 OHCI controller for packet-per-buffer mode.
A local node of the node corresponding to the given path is used as the
controller, thus any path is accepted as long as process has enough
permission for the path.</doc>
        <source-position filename="../src/fw_iso_rx_single.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.c"
                 line="97">A #HinokoFwIsoRxSingle.</doc>
            <type name="FwIsoRxSingle" c:type="HinokoFwIsoRxSingle*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.c"
                 line="98">A path to any Linux FireWire character device.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.c"
                 line="99">An isochronous channel to listen.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="header_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.c"
                 line="100">The number of bytes for header of IR context.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_payload"
              c:identifier="hinoko_fw_iso_rx_single_get_payload"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_rx_single.c"
             line="294">Retrieve payload of IR context for a handled packet corresponding to index.</doc>
        <source-position filename="../src/fw_iso_rx_single.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.c"
                 line="296">A #HinokoFwIsoRxSingle.</doc>
            <type name="FwIsoRxSingle" c:type="HinokoFwIsoRxSingle*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.c"
                 line="297">the index inner available packets.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="payload"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.c"
                 line="298">The
     array with data frame for payload of IR context.</doc>
            <array length="2" zero-terminated="0" c:type="const guint8**">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.c"
                 line="300">The number of bytes in the above @payload.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="map_buffer"
              c:identifier="hinoko_fw_iso_rx_single_map_buffer"
              throws="1">
        <source-position filename="../src/fw_iso_rx_single.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FwIsoRxSingle" c:type="HinokoFwIsoRxSingle*"/>
          </instance-parameter>
          <parameter name="maximum_bytes_per_payload"
                     transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="payloads_per_buffer" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="release" c:identifier="hinoko_fw_iso_rx_single_release">
        <doc xml:space="preserve"
             filename="../src/fw_iso_rx_single.c"
             line="129">Release allocated IR context from 1394 OHCI controller.</doc>
        <source-position filename="../src/fw_iso_rx_single.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.c"
                 line="131">A #HinokoFwIsoRxSingle.</doc>
            <type name="FwIsoRxSingle" c:type="HinokoFwIsoRxSingle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="start"
              c:identifier="hinoko_fw_iso_rx_single_start"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_rx_single.c"
             line="190">Start IR context.</doc>
        <source-position filename="../src/fw_iso_rx_single.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.c"
                 line="192">A #HinokoFwIsoRxSingle.</doc>
            <type name="FwIsoRxSingle" c:type="HinokoFwIsoRxSingle*"/>
          </instance-parameter>
          <parameter name="cycle_match"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.c"
                 line="193">
		 The isochronous cycle to start packet processing. The first
		 element should be the second part of isochronous cycle, up to
		 3. The second element should be the cycle part of isochronous
		 cycle, up to 7999.</doc>
            <array zero-terminated="0" c:type="const guint16*" fixed-size="2">
              <type name="guint16"/>
            </array>
          </parameter>
          <parameter name="sync" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.c"
                 line="198">The value of sync field in isochronous header for packet processing,
	  up to 15.</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="tags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.c"
                 line="200">The value of tag field in isochronous header for packet processing.</doc>
            <type name="FwIsoCtxMatchFlag" c:type="HinokoFwIsoCtxMatchFlag"/>
          </parameter>
          <parameter name="packets_per_irq" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.c"
                 line="201">The number of packets as interval of event. Skip cycles are
	     ignored.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="hinoko_fw_iso_rx_single_stop">
        <doc xml:space="preserve"
             filename="../src/fw_iso_rx_single.c"
             line="239">Stop IR context.</doc>
        <source-position filename="../src/fw_iso_rx_single.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.c"
                 line="241">A #HinokoFwIsoRxSingle.</doc>
            <type name="FwIsoRxSingle" c:type="HinokoFwIsoRxSingle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unmap_buffer"
              c:identifier="hinoko_fw_iso_rx_single_unmap_buffer">
        <doc xml:space="preserve"
             filename="../src/fw_iso_rx_single.c"
             line="168">Unmap intermediate buffer shard with 1394 OHCI controller for payload
of IR context.</doc>
        <source-position filename="../src/fw_iso_rx_single.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.c"
                 line="170">A #HinokoFwIsoRxSingle.</doc>
            <type name="FwIsoRxSingle" c:type="HinokoFwIsoRxSingle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="FwIsoCtx" c:type="HinokoFwIsoCtx"/>
      </field>
      <field name="priv">
        <type name="FwIsoRxSinglePrivate"
              c:type="HinokoFwIsoRxSinglePrivate*"/>
      </field>
      <glib:signal name="interrupted" when="last">
        <doc xml:space="preserve"
             filename="../src/fw_iso_rx_single.c"
             line="51">When any packet is available, the #HinokoFwIsoRxSingle::interrupted
signal is emitted with header of the packet. In a handler of the
signal, payload of received packet is available by a call of
#hinoko_fw_iso_rx_single_get_payload().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.c"
                 line="54">sec part of isochronous cycle when interrupt occurs.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cycle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.c"
                 line="55">cycle part of of isochronous cycle when interrupt occurs.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="header" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.c"
                 line="56">The
	    headers of IR context for handled packets.</doc>
            <array length="3" zero-terminated="0" c:type="gpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="header_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.c"
                 line="58">the number of bytes for @header.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_rx_single.c"
                 line="59">the number of packets to handle.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="FwIsoRxSingleClass"
            c:type="HinokoFwIsoRxSingleClass"
            glib:is-gtype-struct-for="FwIsoRxSingle">
      <source-position filename="../src/fw_iso_rx_single.h" line="66"/>
      <field name="parent_class">
        <type name="FwIsoCtxClass" c:type="HinokoFwIsoCtxClass"/>
      </field>
      <field name="interrupted">
        <callback name="interrupted">
          <source-position filename="../src/fw_iso_rx_single.h" line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_rx_single.h"
                   line="50">A #HinokoFwIsoRxSingle.</doc>
              <type name="FwIsoRxSingle" c:type="HinokoFwIsoRxSingle*"/>
            </parameter>
            <parameter name="sec" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_rx_single.h"
                   line="51">sec part of isochronous cycle when interrupt occurs.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="cycle" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_rx_single.h"
                   line="52">cycle part of of isochronous cycle when interrupt occurs.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="header" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_rx_single.h"
                   line="53">The
	    headers of IR context for handled packets.</doc>
              <array length="4" zero-terminated="0" c:type="const guint8*">
                <type name="guint8"/>
              </array>
            </parameter>
            <parameter name="header_length" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_rx_single.h"
                   line="55">the number of bytes for @header.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="count" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_rx_single.h"
                   line="56">the number of packets to handle.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="FwIsoRxSinglePrivate"
            c:type="HinokoFwIsoRxSinglePrivate"
            disguised="1">
      <source-position filename="../src/fw_iso_rx_single.h" line="37"/>
    </record>
    <class name="FwIsoTx"
           c:symbol-prefix="fw_iso_tx"
           c:type="HinokoFwIsoTx"
           parent="FwIsoCtx"
           glib:type-name="HinokoFwIsoTx"
           glib:get-type="hinoko_fw_iso_tx_get_type"
           glib:type-struct="FwIsoTxClass">
      <source-position filename="../src/fw_iso_tx.h" line="64"/>
      <constructor name="new" c:identifier="hinoko_fw_iso_tx_new">
        <doc xml:space="preserve"
             filename="../src/fw_iso_tx.c"
             line="76">Instantiate #HinokoFwIsoTx object and return the instance.</doc>
        <source-position filename="../src/fw_iso_tx.h" line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../src/fw_iso_tx.c"
               line="81">an instance of #HinokoFwIsoTx.</doc>
          <type name="FwIsoTx" c:type="HinokoFwIsoTx*"/>
        </return-value>
      </constructor>
      <virtual-method name="interrupted">
        <doc xml:space="preserve"
             filename="../src/fw_iso_tx.h"
             line="48">When registered packets are handled, #HinokoFwIsoTxClass::interrupted
handler is called with timestamps of the packet.</doc>
        <source-position filename="../src/fw_iso_tx.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.h"
                 line="50">A #HinokoFwIsoTx.</doc>
            <type name="FwIsoTx" c:type="HinokoFwIsoTx*"/>
          </instance-parameter>
          <parameter name="sec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.h"
                 line="51">sec part of isochronous cycle when interrupt occurs.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cycle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.h"
                 line="52">cycle part of of isochronous cycle when interrupt occurs.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="tstamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.h"
                 line="53">A series
    of timestamps for packets already handled.</doc>
            <array length="3" zero-terminated="0" c:type="const guint8*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="tstamp_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.h"
                 line="55">the number of bytes for @tstamp.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.h"
                 line="56">the number of handled packets.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="allocate"
              c:identifier="hinoko_fw_iso_tx_allocate"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_tx.c"
             line="88">Allocate an IT context to 1394 OHCI controller. A local node of the node
corresponding to the given path is used as the controller, thus any path is
accepted as long as process has enough permission for the path.</doc>
        <source-position filename="../src/fw_iso_tx.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="90">A #HinokoFwIsoTx.</doc>
            <type name="FwIsoTx" c:type="HinokoFwIsoTx*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="91">A path to any Linux FireWire character device.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="scode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="92">A #HinokoFwScode to indicate speed of isochronous communication.</doc>
            <type name="FwScode" c:type="HinokoFwScode"/>
          </parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="93">An isochronous channel to transfer.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="header_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="94">The number of bytes for header of IT context.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="map_buffer"
              c:identifier="hinoko_fw_iso_tx_map_buffer"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_tx.c"
             line="128">Map intermediate buffer to share payload of IT context with 1394 OHCI
controller.</doc>
        <source-position filename="../src/fw_iso_tx.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="130">A #HinokoFwIsoTx.</doc>
            <type name="FwIsoTx" c:type="HinokoFwIsoTx*"/>
          </instance-parameter>
          <parameter name="maximum_bytes_per_payload"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="131">The number of bytes for payload of IT context.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="payloads_per_buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="132">The number of payloads of IT context in buffer.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_packet"
              c:identifier="hinoko_fw_iso_tx_register_packet"
              throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_tx.c"
             line="248">Register packet data in a shape of header and payload of IT context.</doc>
        <source-position filename="../src/fw_iso_tx.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="250">A #HinokoFwIsoTx.</doc>
            <type name="FwIsoTx" c:type="HinokoFwIsoTx*"/>
          </instance-parameter>
          <parameter name="tags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="251">The value of tag field for isochronous packet to register.</doc>
            <type name="FwIsoCtxMatchFlag" c:type="HinokoFwIsoCtxMatchFlag"/>
          </parameter>
          <parameter name="sy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="252">The value of sy field for isochronous packet to register.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="header"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="253">The header of IT context
	    for isochronous packet.</doc>
            <array length="3" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="header_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="255">The number of bytes for the @header.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="payload"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="256">The payload of IT context
	     for isochronous packet.</doc>
            <array length="5" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="payload_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="258">The number of bytes for the @payload.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="release" c:identifier="hinoko_fw_iso_tx_release">
        <doc xml:space="preserve"
             filename="../src/fw_iso_tx.c"
             line="113">Release allocated IT context from 1394 OHCI controller.</doc>
        <source-position filename="../src/fw_iso_tx.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="115">A #HinokoFwIsoTx.</doc>
            <type name="FwIsoTx" c:type="HinokoFwIsoTx*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="hinoko_fw_iso_tx_start" throws="1">
        <doc xml:space="preserve"
             filename="../src/fw_iso_tx.c"
             line="187">Start IT context.</doc>
        <source-position filename="../src/fw_iso_tx.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="189">A #HinokoFwIsoTx.</doc>
            <type name="FwIsoTx" c:type="HinokoFwIsoTx*"/>
          </instance-parameter>
          <parameter name="cycle_match"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="190">
		 The isochronous cycle to start packet processing. The first
		 element should be the second part of isochronous cycle, up to
		 3. The second element should be the cycle part of isochronous
		 cycle, up to 7999.</doc>
            <array zero-terminated="0" c:type="const guint16*" fixed-size="2">
              <type name="guint16"/>
            </array>
          </parameter>
          <parameter name="packets_per_irq" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="195">The number of packets as interval of event. This value
	     should be up to (pagesize / 4) due to implementation of
	     Linux FireWire subsystem.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="hinoko_fw_iso_tx_stop">
        <doc xml:space="preserve"
             filename="../src/fw_iso_tx.c"
             line="230">Stop IT context.</doc>
        <source-position filename="../src/fw_iso_tx.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="232">A #HinokoFwIsoTx.</doc>
            <type name="FwIsoTx" c:type="HinokoFwIsoTx*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unmap_buffer" c:identifier="hinoko_fw_iso_tx_unmap_buffer">
        <doc xml:space="preserve"
             filename="../src/fw_iso_tx.c"
             line="156">Unmap intermediate buffer shard with 1394 OHCI controller for payload
of IT context.</doc>
        <source-position filename="../src/fw_iso_tx.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="158">A #HinokoFwIsoTx.</doc>
            <type name="FwIsoTx" c:type="HinokoFwIsoTx*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="FwIsoCtx" c:type="HinokoFwIsoCtx"/>
      </field>
      <field name="priv">
        <type name="FwIsoTxPrivate" c:type="HinokoFwIsoTxPrivate*"/>
      </field>
      <glib:signal name="interrupted" when="last">
        <doc xml:space="preserve"
             filename="../src/fw_iso_tx.c"
             line="46">When registered packets are handled, #HinokoFwIsoTx::interrupted
signal is emitted with timestamps of the packet.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="49">sec part of isochronous cycle when interrupt occurs.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cycle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="50">cycle part of of isochronous cycle when interrupt occurs.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="tstamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="51">A series
    of timestamps for packets already handled.</doc>
            <array length="3" zero-terminated="0" c:type="gpointer">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="tstamp_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="53">the number of bytes for @tstamp.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../src/fw_iso_tx.c"
                 line="54">the number of handled packets.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="FwIsoTxClass"
            c:type="HinokoFwIsoTxClass"
            glib:is-gtype-struct-for="FwIsoTx">
      <source-position filename="../src/fw_iso_tx.h" line="64"/>
      <field name="parent_class">
        <type name="FwIsoCtxClass" c:type="HinokoFwIsoCtxClass"/>
      </field>
      <field name="interrupted">
        <callback name="interrupted">
          <source-position filename="../src/fw_iso_tx.h" line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_tx.h"
                   line="50">A #HinokoFwIsoTx.</doc>
              <type name="FwIsoTx" c:type="HinokoFwIsoTx*"/>
            </parameter>
            <parameter name="sec" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_tx.h"
                   line="51">sec part of isochronous cycle when interrupt occurs.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="cycle" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_tx.h"
                   line="52">cycle part of of isochronous cycle when interrupt occurs.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="tstamp" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_tx.h"
                   line="53">A series
    of timestamps for packets already handled.</doc>
              <array length="4" zero-terminated="0" c:type="const guint8*">
                <type name="guint8"/>
              </array>
            </parameter>
            <parameter name="tstamp_length" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_tx.h"
                   line="55">the number of bytes for @tstamp.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="count" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../src/fw_iso_tx.h"
                   line="56">the number of handled packets.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="FwIsoTxPrivate" c:type="HinokoFwIsoTxPrivate" disguised="1">
      <source-position filename="../src/fw_iso_tx.h" line="37"/>
    </record>
    <enumeration name="FwScode"
                 glib:type-name="HinokoFwScode"
                 glib:get-type="hinoko_fw_scode_get_type"
                 c:type="HinokoFwScode">
      <doc xml:space="preserve"
           filename="../src/hinoko_enum_types.h"
           line="24">A representation of speed for isochronous context on IEEE 1394 bus.</doc>
      <member name="s100"
              value="0"
              c:identifier="HINOKO_FW_SCODE_S100"
              glib:nick="s100">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="26">100 bps.</doc>
      </member>
      <member name="s200"
              value="1"
              c:identifier="HINOKO_FW_SCODE_S200"
              glib:nick="s200">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="27">200 bps.</doc>
      </member>
      <member name="s400"
              value="2"
              c:identifier="HINOKO_FW_SCODE_S400"
              glib:nick="s400">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="28">400 bps.</doc>
      </member>
      <member name="s800"
              value="3"
              c:identifier="HINOKO_FW_SCODE_S800"
              glib:nick="s800">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="29">800 bps.</doc>
      </member>
      <member name="s1600"
              value="4"
              c:identifier="HINOKO_FW_SCODE_S1600"
              glib:nick="s1600">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="30">1600 bps.</doc>
      </member>
      <member name="s3200"
              value="5"
              c:identifier="HINOKO_FW_SCODE_S3200"
              glib:nick="s3200">
        <doc xml:space="preserve"
             filename="../src/hinoko_enum_types.h"
             line="31">3200 bps.</doc>
      </member>
    </enumeration>
    <function-macro name="IS_FW_ISO_CTX"
                    c:identifier="HINOKO_IS_FW_ISO_CTX"
                    introspectable="0">
      <source-position filename="../src/fw_iso_ctx.h" line="19"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FW_ISO_CTX_CLASS"
                    c:identifier="HINOKO_IS_FW_ISO_CTX_CLASS"
                    introspectable="0">
      <source-position filename="../src/fw_iso_ctx.h" line="27"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FW_ISO_RESOURCE"
                    c:identifier="HINOKO_IS_FW_ISO_RESOURCE"
                    introspectable="0">
      <source-position filename="../src/fw_iso_resource.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FW_ISO_RESOURCE_AUTO"
                    c:identifier="HINOKO_IS_FW_ISO_RESOURCE_AUTO"
                    introspectable="0">
      <source-position filename="../src/fw_iso_resource_auto.h" line="18"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FW_ISO_RESOURCE_AUTO_CLASS"
                    c:identifier="HINOKO_IS_FW_ISO_RESOURCE_AUTO_CLASS"
                    introspectable="0">
      <source-position filename="../src/fw_iso_resource_auto.h" line="26"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FW_ISO_RESOURCE_CLASS"
                    c:identifier="HINOKO_IS_FW_ISO_RESOURCE_CLASS"
                    introspectable="0">
      <source-position filename="../src/fw_iso_resource.h" line="26"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FW_ISO_RX_MULTIPLE"
                    c:identifier="HINOKO_IS_FW_ISO_RX_MULTIPLE"
                    introspectable="0">
      <source-position filename="../src/fw_iso_rx_multiple.h" line="19"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FW_ISO_RX_MULTIPLE_CLASS"
                    c:identifier="HINOKO_IS_FW_ISO_RX_MULTIPLE_CLASS"
                    introspectable="0">
      <source-position filename="../src/fw_iso_rx_multiple.h" line="27"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FW_ISO_RX_SINGLE"
                    c:identifier="HINOKO_IS_FW_ISO_RX_SINGLE"
                    introspectable="0">
      <source-position filename="../src/fw_iso_rx_single.h" line="19"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FW_ISO_RX_SINGLE_CLASS"
                    c:identifier="HINOKO_IS_FW_ISO_RX_SINGLE_CLASS"
                    introspectable="0">
      <source-position filename="../src/fw_iso_rx_single.h" line="27"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FW_ISO_TX"
                    c:identifier="HINOKO_IS_FW_ISO_TX"
                    introspectable="0">
      <source-position filename="../src/fw_iso_tx.h" line="19"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FW_ISO_TX_CLASS"
                    c:identifier="HINOKO_IS_FW_ISO_TX_CLASS"
                    introspectable="0">
      <source-position filename="../src/fw_iso_tx.h" line="27"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function name="fw_iso_ctx_error_quark"
              c:identifier="hinoko_fw_iso_ctx_error_quark"
              moved-to="FwIsoCtxError.quark">
      <doc xml:space="preserve"
           filename="../src/fw_iso_ctx.c"
           line="48">Return the GQuark for error domain of GError which has code in #HinokoFwIsoCtxError.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/fw_iso_ctx.c"
             line="53">A #GQuark.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="fw_iso_resource_auto_error_quark"
              c:identifier="hinoko_fw_iso_resource_auto_error_quark"
              moved-to="FwIsoResourceAutoError.quark">
      <doc xml:space="preserve"
           filename="../src/fw_iso_resource_auto.c"
           line="29">Return the GQuark for error domain of GError which has code in #HinokoFwIsoResourceAutoError.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/fw_iso_resource_auto.c"
             line="34">A #GQuark.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="fw_iso_resource_error_quark"
              c:identifier="hinoko_fw_iso_resource_error_quark"
              moved-to="FwIsoResourceError.quark">
      <doc xml:space="preserve"
           filename="../src/fw_iso_resource.c"
           line="28">Return the GQuark for error domain of GError which has code in #HinokoFwIsoResourceError.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../src/fw_iso_resource.c"
             line="33">A #GQuark.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="sigs_marshal_VOID__UINT_UINT_OBJECT"
              c:identifier="hinoko_sigs_marshal_VOID__UINT_UINT_OBJECT">
      <source-position filename="../src/hinoko_sigs_marshal.h" line="19"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="sigs_marshal_VOID__UINT_UINT_POINTER_UINT_UINT"
              c:identifier="hinoko_sigs_marshal_VOID__UINT_UINT_POINTER_UINT_UINT">
      <source-position filename="../src/hinoko_sigs_marshal.h" line="10"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="invocation_hint"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
