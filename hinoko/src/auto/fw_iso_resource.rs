// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::FwScode;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "HinokoFwIsoResource")]
    pub struct FwIsoResource(Interface<ffi::HinokoFwIsoResource, ffi::HinokoFwIsoResourceInterface>);

    match fn {
        type_ => || ffi::hinoko_fw_iso_resource_get_type(),
    }
}

impl FwIsoResource {
    pub const NONE: Option<&'static FwIsoResource> = None;

    #[doc(alias = "hinoko_fw_iso_resource_calculate_bandwidth")]
    pub fn calculate_bandwidth(bytes_per_payload: u32, scode: FwScode) -> u32 {
        unsafe {
            ffi::hinoko_fw_iso_resource_calculate_bandwidth(bytes_per_payload, scode.into_glib())
        }
    }
}

pub trait FwIsoResourceExt: 'static {
    #[doc(alias = "hinoko_fw_iso_resource_allocate_async")]
    fn allocate_async(&self, channel_candidates: &[u8], bandwidth: u32) -> Result<(), glib::Error>;

    #[doc(alias = "hinoko_fw_iso_resource_allocate_sync")]
    fn allocate_sync(
        &self,
        channel_candidates: &[u8],
        bandwidth: u32,
        timeout_ms: u32,
    ) -> Result<(), glib::Error>;

    #[doc(alias = "hinoko_fw_iso_resource_create_source")]
    fn create_source(&self) -> Result<glib::Source, glib::Error>;

    #[doc(alias = "hinoko_fw_iso_resource_open")]
    fn open(&self, path: &str, open_flag: i32) -> Result<(), glib::Error>;

    fn generation(&self) -> u32;

    #[doc(alias = "allocated")]
    fn connect_allocated<F: Fn(&Self, u32, u32, Option<&glib::Error>) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn emit_allocated(&self, channel: u32, bandwidth: u32, error: Option<&glib::Error>);

    #[doc(alias = "deallocated")]
    fn connect_deallocated<F: Fn(&Self, u32, u32, Option<&glib::Error>) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    fn emit_deallocated(&self, channel: u32, bandwidth: u32, error: Option<&glib::Error>);

    #[doc(alias = "generation")]
    fn connect_generation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<FwIsoResource>> FwIsoResourceExt for O {
    fn allocate_async(&self, channel_candidates: &[u8], bandwidth: u32) -> Result<(), glib::Error> {
        let channel_candidates_count = channel_candidates.len() as usize;
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok = ffi::hinoko_fw_iso_resource_allocate_async(
                self.as_ref().to_glib_none().0,
                channel_candidates.to_glib_none().0,
                channel_candidates_count,
                bandwidth,
                &mut error,
            );
            assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn allocate_sync(
        &self,
        channel_candidates: &[u8],
        bandwidth: u32,
        timeout_ms: u32,
    ) -> Result<(), glib::Error> {
        let channel_candidates_count = channel_candidates.len() as usize;
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok = ffi::hinoko_fw_iso_resource_allocate_sync(
                self.as_ref().to_glib_none().0,
                channel_candidates.to_glib_none().0,
                channel_candidates_count,
                bandwidth,
                timeout_ms,
                &mut error,
            );
            assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn create_source(&self) -> Result<glib::Source, glib::Error> {
        unsafe {
            let mut source = ptr::null_mut();
            let mut error = ptr::null_mut();
            let is_ok = ffi::hinoko_fw_iso_resource_create_source(
                self.as_ref().to_glib_none().0,
                &mut source,
                &mut error,
            );
            assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(from_glib_full(source))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn open(&self, path: &str, open_flag: i32) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok = ffi::hinoko_fw_iso_resource_open(
                self.as_ref().to_glib_none().0,
                path.to_glib_none().0,
                open_flag,
                &mut error,
            );
            assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn generation(&self) -> u32 {
        glib::ObjectExt::property(self.as_ref(), "generation")
    }

    fn connect_allocated<F: Fn(&Self, u32, u32, Option<&glib::Error>) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn allocated_trampoline<
            P: IsA<FwIsoResource>,
            F: Fn(&P, u32, u32, Option<&glib::Error>) + 'static,
        >(
            this: *mut ffi::HinokoFwIsoResource,
            channel: libc::c_uint,
            bandwidth: libc::c_uint,
            error: *mut glib::ffi::GError,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                FwIsoResource::from_glib_borrow(this).unsafe_cast_ref(),
                channel,
                bandwidth,
                Option::<glib::Error>::from_glib_borrow(error)
                    .as_ref()
                    .as_ref(),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"allocated\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    allocated_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn emit_allocated(&self, channel: u32, bandwidth: u32, error: Option<&glib::Error>) {
        self.emit_by_name::<()>("allocated", &[&channel, &bandwidth, &error]);
    }

    fn connect_deallocated<F: Fn(&Self, u32, u32, Option<&glib::Error>) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn deallocated_trampoline<
            P: IsA<FwIsoResource>,
            F: Fn(&P, u32, u32, Option<&glib::Error>) + 'static,
        >(
            this: *mut ffi::HinokoFwIsoResource,
            channel: libc::c_uint,
            bandwidth: libc::c_uint,
            error: *mut glib::ffi::GError,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                FwIsoResource::from_glib_borrow(this).unsafe_cast_ref(),
                channel,
                bandwidth,
                Option::<glib::Error>::from_glib_borrow(error)
                    .as_ref()
                    .as_ref(),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"deallocated\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    deallocated_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn emit_deallocated(&self, channel: u32, bandwidth: u32, error: Option<&glib::Error>) {
        self.emit_by_name::<()>("deallocated", &[&channel, &bandwidth, &error]);
    }

    fn connect_generation_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_generation_trampoline<
            P: IsA<FwIsoResource>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HinokoFwIsoResource,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(FwIsoResource::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::generation\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_generation_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for FwIsoResource {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("FwIsoResource")
    }
}
