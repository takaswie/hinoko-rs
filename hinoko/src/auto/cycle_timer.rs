// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::translate::*;
use gobject_sys;
use hinoko_sys;
use std::mem;

glib_wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct CycleTimer(Boxed<hinoko_sys::HinokoCycleTimer>);

    match fn {
        copy => |ptr| gobject_sys::g_boxed_copy(hinoko_sys::hinoko_cycle_timer_get_type(), ptr as *mut _) as *mut hinoko_sys::HinokoCycleTimer,
        free => |ptr| gobject_sys::g_boxed_free(hinoko_sys::hinoko_cycle_timer_get_type(), ptr as *mut _),
        get_type => || hinoko_sys::hinoko_cycle_timer_get_type(),
    }
}

impl CycleTimer {
    pub fn new() -> CycleTimer {
        unsafe {
            from_glib_none(hinoko_sys::hinoko_cycle_timer_new())
        }
    }

    pub fn get_clock_id(&mut self) -> i32 {
        unsafe {
            let mut clock_id = mem::MaybeUninit::uninit();
            hinoko_sys::hinoko_cycle_timer_get_clock_id(self.to_glib_none_mut().0, clock_id.as_mut_ptr());
            let clock_id = clock_id.assume_init();
            clock_id
        }
    }

    pub fn get_timestamp(&mut self) -> (i64, i32) {
        unsafe {
            let mut tv_sec = mem::MaybeUninit::uninit();
            let mut tv_nsec = mem::MaybeUninit::uninit();
            hinoko_sys::hinoko_cycle_timer_get_timestamp(self.to_glib_none_mut().0, tv_sec.as_mut_ptr(), tv_nsec.as_mut_ptr());
            let tv_sec = tv_sec.assume_init();
            let tv_nsec = tv_nsec.assume_init();
            (tv_sec, tv_nsec)
        }
    }
}

impl Default for CycleTimer {
    fn default() -> Self {
        Self::new()
    }
}

unsafe impl Send for CycleTimer {}
