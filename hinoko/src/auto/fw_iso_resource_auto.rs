// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::FwIsoResource;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "HinokoFwIsoResourceAuto")]
    pub struct FwIsoResourceAuto(Object<ffi::HinokoFwIsoResourceAuto, ffi::HinokoFwIsoResourceAutoClass>) @extends FwIsoResource;

    match fn {
        type_ => || ffi::hinoko_fw_iso_resource_auto_get_type(),
    }
}

impl FwIsoResourceAuto {
    pub const NONE: Option<&'static FwIsoResourceAuto> = None;

    #[doc(alias = "hinoko_fw_iso_resource_auto_new")]
    pub fn new() -> FwIsoResourceAuto {
        unsafe { from_glib_full(ffi::hinoko_fw_iso_resource_auto_new()) }
    }
}

impl Default for FwIsoResourceAuto {
    fn default() -> Self {
        Self::new()
    }
}

pub trait FwIsoResourceAutoExt: 'static {
    #[doc(alias = "hinoko_fw_iso_resource_auto_allocate_async")]
    fn allocate_async(&self, channel_candidates: &[u8], bandwidth: u32) -> Result<(), glib::Error>;

    #[doc(alias = "hinoko_fw_iso_resource_auto_allocate_sync")]
    fn allocate_sync(&self, channel_candidates: &[u8], bandwidth: u32) -> Result<(), glib::Error>;

    #[doc(alias = "hinoko_fw_iso_resource_auto_deallocate_async")]
    fn deallocate_async(&self) -> Result<(), glib::Error>;

    #[doc(alias = "hinoko_fw_iso_resource_auto_deallocate_sync")]
    fn deallocate_sync(&self) -> Result<(), glib::Error>;

    fn is_allocated(&self) -> bool;

    fn bandwidth(&self) -> u32;

    fn channel(&self) -> u32;

    #[doc(alias = "allocated")]
    fn connect_allocated_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "bandwidth")]
    fn connect_bandwidth_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "channel")]
    fn connect_channel_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<FwIsoResourceAuto>> FwIsoResourceAutoExt for O {
    fn allocate_async(&self, channel_candidates: &[u8], bandwidth: u32) -> Result<(), glib::Error> {
        let channel_candidates_count = channel_candidates.len() as usize;
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::hinoko_fw_iso_resource_auto_allocate_async(
                self.as_ref().to_glib_none().0,
                channel_candidates.to_glib_none().0,
                channel_candidates_count,
                bandwidth,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn allocate_sync(&self, channel_candidates: &[u8], bandwidth: u32) -> Result<(), glib::Error> {
        let channel_candidates_count = channel_candidates.len() as usize;
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::hinoko_fw_iso_resource_auto_allocate_sync(
                self.as_ref().to_glib_none().0,
                channel_candidates.to_glib_none().0,
                channel_candidates_count,
                bandwidth,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn deallocate_async(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::hinoko_fw_iso_resource_auto_deallocate_async(
                self.as_ref().to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn deallocate_sync(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::hinoko_fw_iso_resource_auto_deallocate_sync(
                self.as_ref().to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn is_allocated(&self) -> bool {
        glib::ObjectExt::property(self.as_ref(), "allocated")
    }

    fn bandwidth(&self) -> u32 {
        glib::ObjectExt::property(self.as_ref(), "bandwidth")
    }

    fn channel(&self) -> u32 {
        glib::ObjectExt::property(self.as_ref(), "channel")
    }

    fn connect_allocated_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_allocated_trampoline<
            P: IsA<FwIsoResourceAuto>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HinokoFwIsoResourceAuto,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(FwIsoResourceAuto::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::allocated\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_allocated_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_bandwidth_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_bandwidth_trampoline<
            P: IsA<FwIsoResourceAuto>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HinokoFwIsoResourceAuto,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(FwIsoResourceAuto::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::bandwidth\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_bandwidth_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_channel_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_channel_trampoline<
            P: IsA<FwIsoResourceAuto>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HinokoFwIsoResourceAuto,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(FwIsoResourceAuto::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::channel\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_channel_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for FwIsoResourceAuto {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("FwIsoResourceAuto")
    }
}
