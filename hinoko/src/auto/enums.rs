// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::error::ErrorDomain;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::ToValue;
use glib::Quark;
use glib::StaticType;
use glib::Type;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "HinokoFwIsoCtxError")]
pub enum FwIsoCtxError {
    #[doc(alias = "HINOKO_FW_ISO_CTX_ERROR_FAILED")]
    Failed,
    #[doc(alias = "HINOKO_FW_ISO_CTX_ERROR_ALLOCATED")]
    Allocated,
    #[doc(alias = "HINOKO_FW_ISO_CTX_ERROR_NOT_ALLOCATED")]
    NotAllocated,
    #[doc(alias = "HINOKO_FW_ISO_CTX_ERROR_MAPPED")]
    Mapped,
    #[doc(alias = "HINOKO_FW_ISO_CTX_ERROR_NOT_MAPPED")]
    NotMapped,
    #[doc(alias = "HINOKO_FW_ISO_CTX_ERROR_CHUNK_UNREGISTERED")]
    ChunkUnregistered,
    #[doc(alias = "HINOKO_FW_ISO_CTX_ERROR_NO_ISOC_CHANNEL")]
    NoIsocChannel,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for FwIsoCtxError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "FwIsoCtxError::{}",
            match *self {
                Self::Failed => "Failed",
                Self::Allocated => "Allocated",
                Self::NotAllocated => "NotAllocated",
                Self::Mapped => "Mapped",
                Self::NotMapped => "NotMapped",
                Self::ChunkUnregistered => "ChunkUnregistered",
                Self::NoIsocChannel => "NoIsocChannel",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for FwIsoCtxError {
    type GlibType = ffi::HinokoFwIsoCtxError;

    fn into_glib(self) -> ffi::HinokoFwIsoCtxError {
        match self {
            Self::Failed => ffi::HINOKO_FW_ISO_CTX_ERROR_FAILED,
            Self::Allocated => ffi::HINOKO_FW_ISO_CTX_ERROR_ALLOCATED,
            Self::NotAllocated => ffi::HINOKO_FW_ISO_CTX_ERROR_NOT_ALLOCATED,
            Self::Mapped => ffi::HINOKO_FW_ISO_CTX_ERROR_MAPPED,
            Self::NotMapped => ffi::HINOKO_FW_ISO_CTX_ERROR_NOT_MAPPED,
            Self::ChunkUnregistered => ffi::HINOKO_FW_ISO_CTX_ERROR_CHUNK_UNREGISTERED,
            Self::NoIsocChannel => ffi::HINOKO_FW_ISO_CTX_ERROR_NO_ISOC_CHANNEL,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::HinokoFwIsoCtxError> for FwIsoCtxError {
    unsafe fn from_glib(value: ffi::HinokoFwIsoCtxError) -> Self {
        match value {
            ffi::HINOKO_FW_ISO_CTX_ERROR_FAILED => Self::Failed,
            ffi::HINOKO_FW_ISO_CTX_ERROR_ALLOCATED => Self::Allocated,
            ffi::HINOKO_FW_ISO_CTX_ERROR_NOT_ALLOCATED => Self::NotAllocated,
            ffi::HINOKO_FW_ISO_CTX_ERROR_MAPPED => Self::Mapped,
            ffi::HINOKO_FW_ISO_CTX_ERROR_NOT_MAPPED => Self::NotMapped,
            ffi::HINOKO_FW_ISO_CTX_ERROR_CHUNK_UNREGISTERED => Self::ChunkUnregistered,
            ffi::HINOKO_FW_ISO_CTX_ERROR_NO_ISOC_CHANNEL => Self::NoIsocChannel,
            value => Self::__Unknown(value),
        }
    }
}

impl ErrorDomain for FwIsoCtxError {
    fn domain() -> Quark {
        unsafe { from_glib(ffi::hinoko_fw_iso_ctx_error_quark()) }
    }

    fn code(self) -> i32 {
        self.into_glib()
    }

    fn from(code: i32) -> Option<Self> {
        match code {
            ffi::HINOKO_FW_ISO_CTX_ERROR_FAILED => Some(Self::Failed),
            ffi::HINOKO_FW_ISO_CTX_ERROR_ALLOCATED => Some(Self::Allocated),
            ffi::HINOKO_FW_ISO_CTX_ERROR_NOT_ALLOCATED => Some(Self::NotAllocated),
            ffi::HINOKO_FW_ISO_CTX_ERROR_MAPPED => Some(Self::Mapped),
            ffi::HINOKO_FW_ISO_CTX_ERROR_NOT_MAPPED => Some(Self::NotMapped),
            ffi::HINOKO_FW_ISO_CTX_ERROR_CHUNK_UNREGISTERED => Some(Self::ChunkUnregistered),
            ffi::HINOKO_FW_ISO_CTX_ERROR_NO_ISOC_CHANNEL => Some(Self::NoIsocChannel),
            _ => Some(Self::Failed),
        }
    }
}

impl StaticType for FwIsoCtxError {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::hinoko_fw_iso_ctx_error_get_type()) }
    }
}

impl glib::value::ValueType for FwIsoCtxError {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for FwIsoCtxError {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for FwIsoCtxError {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "HinokoFwIsoCtxMode")]
pub enum FwIsoCtxMode {
    #[doc(alias = "HINOKO_FW_ISO_CTX_MODE_TX")]
    Tx,
    #[doc(alias = "HINOKO_FW_ISO_CTX_MODE_RX_SINGLE")]
    RxSingle,
    #[doc(alias = "HINOKO_FW_ISO_CTX_MODE_RX_MULTIPLE")]
    RxMultiple,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for FwIsoCtxMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "FwIsoCtxMode::{}",
            match *self {
                Self::Tx => "Tx",
                Self::RxSingle => "RxSingle",
                Self::RxMultiple => "RxMultiple",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for FwIsoCtxMode {
    type GlibType = ffi::HinokoFwIsoCtxMode;

    fn into_glib(self) -> ffi::HinokoFwIsoCtxMode {
        match self {
            Self::Tx => ffi::HINOKO_FW_ISO_CTX_MODE_TX,
            Self::RxSingle => ffi::HINOKO_FW_ISO_CTX_MODE_RX_SINGLE,
            Self::RxMultiple => ffi::HINOKO_FW_ISO_CTX_MODE_RX_MULTIPLE,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::HinokoFwIsoCtxMode> for FwIsoCtxMode {
    unsafe fn from_glib(value: ffi::HinokoFwIsoCtxMode) -> Self {
        match value {
            ffi::HINOKO_FW_ISO_CTX_MODE_TX => Self::Tx,
            ffi::HINOKO_FW_ISO_CTX_MODE_RX_SINGLE => Self::RxSingle,
            ffi::HINOKO_FW_ISO_CTX_MODE_RX_MULTIPLE => Self::RxMultiple,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for FwIsoCtxMode {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::hinoko_fw_iso_ctx_mode_get_type()) }
    }
}

impl glib::value::ValueType for FwIsoCtxMode {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for FwIsoCtxMode {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for FwIsoCtxMode {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "HinokoFwIsoResourceAutoError")]
pub enum FwIsoResourceAutoError {
    #[doc(alias = "HINOKO_FW_ISO_RESOURCE_AUTO_ERROR_FAILED")]
    Failed,
    #[doc(alias = "HINOKO_FW_ISO_RESOURCE_AUTO_ERROR_ALLOCATED")]
    Allocated,
    #[doc(alias = "HINOKO_FW_ISO_RESOURCE_AUTO_ERROR_NOT_ALLOCATED")]
    NotAllocated,
    #[doc(alias = "HINOKO_FW_ISO_RESOURCE_AUTO_ERROR_TIMEOUT")]
    Timeout,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for FwIsoResourceAutoError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "FwIsoResourceAutoError::{}",
            match *self {
                Self::Failed => "Failed",
                Self::Allocated => "Allocated",
                Self::NotAllocated => "NotAllocated",
                Self::Timeout => "Timeout",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for FwIsoResourceAutoError {
    type GlibType = ffi::HinokoFwIsoResourceAutoError;

    fn into_glib(self) -> ffi::HinokoFwIsoResourceAutoError {
        match self {
            Self::Failed => ffi::HINOKO_FW_ISO_RESOURCE_AUTO_ERROR_FAILED,
            Self::Allocated => ffi::HINOKO_FW_ISO_RESOURCE_AUTO_ERROR_ALLOCATED,
            Self::NotAllocated => ffi::HINOKO_FW_ISO_RESOURCE_AUTO_ERROR_NOT_ALLOCATED,
            Self::Timeout => ffi::HINOKO_FW_ISO_RESOURCE_AUTO_ERROR_TIMEOUT,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::HinokoFwIsoResourceAutoError> for FwIsoResourceAutoError {
    unsafe fn from_glib(value: ffi::HinokoFwIsoResourceAutoError) -> Self {
        match value {
            ffi::HINOKO_FW_ISO_RESOURCE_AUTO_ERROR_FAILED => Self::Failed,
            ffi::HINOKO_FW_ISO_RESOURCE_AUTO_ERROR_ALLOCATED => Self::Allocated,
            ffi::HINOKO_FW_ISO_RESOURCE_AUTO_ERROR_NOT_ALLOCATED => Self::NotAllocated,
            ffi::HINOKO_FW_ISO_RESOURCE_AUTO_ERROR_TIMEOUT => Self::Timeout,
            value => Self::__Unknown(value),
        }
    }
}

impl ErrorDomain for FwIsoResourceAutoError {
    fn domain() -> Quark {
        unsafe { from_glib(ffi::hinoko_fw_iso_resource_auto_error_quark()) }
    }

    fn code(self) -> i32 {
        self.into_glib()
    }

    fn from(code: i32) -> Option<Self> {
        match code {
            ffi::HINOKO_FW_ISO_RESOURCE_AUTO_ERROR_FAILED => Some(Self::Failed),
            ffi::HINOKO_FW_ISO_RESOURCE_AUTO_ERROR_ALLOCATED => Some(Self::Allocated),
            ffi::HINOKO_FW_ISO_RESOURCE_AUTO_ERROR_NOT_ALLOCATED => Some(Self::NotAllocated),
            ffi::HINOKO_FW_ISO_RESOURCE_AUTO_ERROR_TIMEOUT => Some(Self::Timeout),
            _ => Some(Self::Failed),
        }
    }
}

impl StaticType for FwIsoResourceAutoError {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::hinoko_fw_iso_resource_auto_error_get_type()) }
    }
}

impl glib::value::ValueType for FwIsoResourceAutoError {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for FwIsoResourceAutoError {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for FwIsoResourceAutoError {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "HinokoFwIsoResourceError")]
pub enum FwIsoResourceError {
    #[doc(alias = "HINOKO_FW_ISO_RESOURCE_ERROR_FAILED")]
    Failed,
    #[doc(alias = "HINOKO_FW_ISO_RESOURCE_ERROR_OPENED")]
    Opened,
    #[doc(alias = "HINOKO_FW_ISO_RESOURCE_ERROR_NOT_OPENED")]
    NotOpened,
    #[doc(alias = "HINOKO_FW_ISO_RESOURCE_ERROR_TIMEOUT")]
    Timeout,
    #[doc(alias = "HINOKO_FW_ISO_RESOURCE_ERROR_EVENT")]
    Event,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for FwIsoResourceError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "FwIsoResourceError::{}",
            match *self {
                Self::Failed => "Failed",
                Self::Opened => "Opened",
                Self::NotOpened => "NotOpened",
                Self::Timeout => "Timeout",
                Self::Event => "Event",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for FwIsoResourceError {
    type GlibType = ffi::HinokoFwIsoResourceError;

    fn into_glib(self) -> ffi::HinokoFwIsoResourceError {
        match self {
            Self::Failed => ffi::HINOKO_FW_ISO_RESOURCE_ERROR_FAILED,
            Self::Opened => ffi::HINOKO_FW_ISO_RESOURCE_ERROR_OPENED,
            Self::NotOpened => ffi::HINOKO_FW_ISO_RESOURCE_ERROR_NOT_OPENED,
            Self::Timeout => ffi::HINOKO_FW_ISO_RESOURCE_ERROR_TIMEOUT,
            Self::Event => ffi::HINOKO_FW_ISO_RESOURCE_ERROR_EVENT,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::HinokoFwIsoResourceError> for FwIsoResourceError {
    unsafe fn from_glib(value: ffi::HinokoFwIsoResourceError) -> Self {
        match value {
            ffi::HINOKO_FW_ISO_RESOURCE_ERROR_FAILED => Self::Failed,
            ffi::HINOKO_FW_ISO_RESOURCE_ERROR_OPENED => Self::Opened,
            ffi::HINOKO_FW_ISO_RESOURCE_ERROR_NOT_OPENED => Self::NotOpened,
            ffi::HINOKO_FW_ISO_RESOURCE_ERROR_TIMEOUT => Self::Timeout,
            ffi::HINOKO_FW_ISO_RESOURCE_ERROR_EVENT => Self::Event,
            value => Self::__Unknown(value),
        }
    }
}

impl ErrorDomain for FwIsoResourceError {
    fn domain() -> Quark {
        unsafe { from_glib(ffi::hinoko_fw_iso_resource_error_quark()) }
    }

    fn code(self) -> i32 {
        self.into_glib()
    }

    fn from(code: i32) -> Option<Self> {
        match code {
            ffi::HINOKO_FW_ISO_RESOURCE_ERROR_FAILED => Some(Self::Failed),
            ffi::HINOKO_FW_ISO_RESOURCE_ERROR_OPENED => Some(Self::Opened),
            ffi::HINOKO_FW_ISO_RESOURCE_ERROR_NOT_OPENED => Some(Self::NotOpened),
            ffi::HINOKO_FW_ISO_RESOURCE_ERROR_TIMEOUT => Some(Self::Timeout),
            ffi::HINOKO_FW_ISO_RESOURCE_ERROR_EVENT => Some(Self::Event),
            _ => Some(Self::Failed),
        }
    }
}

impl StaticType for FwIsoResourceError {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::hinoko_fw_iso_resource_error_get_type()) }
    }
}

impl glib::value::ValueType for FwIsoResourceError {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for FwIsoResourceError {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for FwIsoResourceError {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "HinokoFwScode")]
pub enum FwScode {
    #[doc(alias = "HINOKO_FW_SCODE_S100")]
    S100,
    #[doc(alias = "HINOKO_FW_SCODE_S200")]
    S200,
    #[doc(alias = "HINOKO_FW_SCODE_S400")]
    S400,
    #[doc(alias = "HINOKO_FW_SCODE_S800")]
    S800,
    #[doc(alias = "HINOKO_FW_SCODE_S1600")]
    S1600,
    #[doc(alias = "HINOKO_FW_SCODE_S3200")]
    S3200,
    #[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for FwScode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "FwScode::{}",
            match *self {
                Self::S100 => "S100",
                Self::S200 => "S200",
                Self::S400 => "S400",
                Self::S800 => "S800",
                Self::S1600 => "S1600",
                Self::S3200 => "S3200",
                _ => "Unknown",
            }
        )
    }
}

#[doc(hidden)]
impl IntoGlib for FwScode {
    type GlibType = ffi::HinokoFwScode;

    fn into_glib(self) -> ffi::HinokoFwScode {
        match self {
            Self::S100 => ffi::HINOKO_FW_SCODE_S100,
            Self::S200 => ffi::HINOKO_FW_SCODE_S200,
            Self::S400 => ffi::HINOKO_FW_SCODE_S400,
            Self::S800 => ffi::HINOKO_FW_SCODE_S800,
            Self::S1600 => ffi::HINOKO_FW_SCODE_S1600,
            Self::S3200 => ffi::HINOKO_FW_SCODE_S3200,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::HinokoFwScode> for FwScode {
    unsafe fn from_glib(value: ffi::HinokoFwScode) -> Self {
        match value {
            ffi::HINOKO_FW_SCODE_S100 => Self::S100,
            ffi::HINOKO_FW_SCODE_S200 => Self::S200,
            ffi::HINOKO_FW_SCODE_S400 => Self::S400,
            ffi::HINOKO_FW_SCODE_S800 => Self::S800,
            ffi::HINOKO_FW_SCODE_S1600 => Self::S1600,
            ffi::HINOKO_FW_SCODE_S3200 => Self::S3200,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for FwScode {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::hinoko_fw_scode_get_type()) }
    }
}

impl glib::value::ValueType for FwScode {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for FwScode {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for FwScode {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}
