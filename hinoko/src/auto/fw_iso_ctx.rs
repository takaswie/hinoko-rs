// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "HinokoFwIsoCtx")]
    pub struct FwIsoCtx(Object<ffi::HinokoFwIsoCtx, ffi::HinokoFwIsoCtxClass>);

    match fn {
        type_ => || ffi::hinoko_fw_iso_ctx_get_type(),
    }
}

impl FwIsoCtx {
    pub const NONE: Option<&'static FwIsoCtx> = None;
}

pub trait FwIsoCtxExt: 'static {
    #[doc(alias = "hinoko_fw_iso_ctx_create_source")]
    fn create_source(&self) -> Result<glib::Source, glib::Error>;

    #[doc(alias = "hinoko_fw_iso_ctx_flush_completions")]
    fn flush_completions(&self) -> Result<(), glib::Error>;

    #[doc(alias = "bytes-per-chunk")]
    fn bytes_per_chunk(&self) -> u32;

    #[doc(alias = "chunks-per-buffer")]
    fn chunks_per_buffer(&self) -> u32;

    #[doc(alias = "registered-chunk-count")]
    fn registered_chunk_count(&self) -> u32;

    #[doc(alias = "stopped")]
    fn connect_stopped<F: Fn(&Self, Option<&glib::Error>) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;

    #[doc(alias = "bytes-per-chunk")]
    fn connect_bytes_per_chunk_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "chunks-per-buffer")]
    fn connect_chunks_per_buffer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "registered-chunk-count")]
    fn connect_registered_chunk_count_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId;
}

impl<O: IsA<FwIsoCtx>> FwIsoCtxExt for O {
    fn create_source(&self) -> Result<glib::Source, glib::Error> {
        unsafe {
            let mut gsrc = ptr::null_mut();
            let mut error = ptr::null_mut();
            let _ = ffi::hinoko_fw_iso_ctx_create_source(
                self.as_ref().to_glib_none().0,
                &mut gsrc,
                &mut error,
            );
            if error.is_null() {
                Ok(from_glib_full(gsrc))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn flush_completions(&self) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let _ = ffi::hinoko_fw_iso_ctx_flush_completions(
                self.as_ref().to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn bytes_per_chunk(&self) -> u32 {
        glib::ObjectExt::property(self.as_ref(), "bytes-per-chunk")
    }

    fn chunks_per_buffer(&self) -> u32 {
        glib::ObjectExt::property(self.as_ref(), "chunks-per-buffer")
    }

    fn registered_chunk_count(&self) -> u32 {
        glib::ObjectExt::property(self.as_ref(), "registered-chunk-count")
    }

    fn connect_stopped<F: Fn(&Self, Option<&glib::Error>) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn stopped_trampoline<
            P: IsA<FwIsoCtx>,
            F: Fn(&P, Option<&glib::Error>) + 'static,
        >(
            this: *mut ffi::HinokoFwIsoCtx,
            error: *mut glib::ffi::GError,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                FwIsoCtx::from_glib_borrow(this).unsafe_cast_ref(),
                Option::<glib::Error>::from_glib_borrow(error)
                    .as_ref()
                    .as_ref(),
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"stopped\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    stopped_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_bytes_per_chunk_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_bytes_per_chunk_trampoline<
            P: IsA<FwIsoCtx>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HinokoFwIsoCtx,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(FwIsoCtx::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::bytes-per-chunk\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_bytes_per_chunk_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_chunks_per_buffer_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_chunks_per_buffer_trampoline<
            P: IsA<FwIsoCtx>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HinokoFwIsoCtx,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(FwIsoCtx::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::chunks-per-buffer\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_chunks_per_buffer_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    fn connect_registered_chunk_count_notify<F: Fn(&Self) + 'static>(
        &self,
        f: F,
    ) -> SignalHandlerId {
        unsafe extern "C" fn notify_registered_chunk_count_trampoline<
            P: IsA<FwIsoCtx>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::HinokoFwIsoCtx,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(FwIsoCtx::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::registered-chunk-count\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    notify_registered_chunk_count_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for FwIsoCtx {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("FwIsoCtx")
    }
}
