// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::FwIsoCtx;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "HinokoFwIsoRxMultiple")]
    pub struct FwIsoRxMultiple(Object<ffi::HinokoFwIsoRxMultiple, ffi::HinokoFwIsoRxMultipleClass>) @implements FwIsoCtx;

    match fn {
        type_ => || ffi::hinoko_fw_iso_rx_multiple_get_type(),
    }
}

impl FwIsoRxMultiple {
    pub const NONE: Option<&'static FwIsoRxMultiple> = None;

    #[doc(alias = "hinoko_fw_iso_rx_multiple_new")]
    pub fn new() -> FwIsoRxMultiple {
        unsafe { from_glib_full(ffi::hinoko_fw_iso_rx_multiple_new()) }
    }
}

impl Default for FwIsoRxMultiple {
    fn default() -> Self {
        Self::new()
    }
}

pub trait FwIsoRxMultipleExt: 'static {
    #[doc(alias = "hinoko_fw_iso_rx_multiple_allocate")]
    fn allocate(&self, path: &str, channels: &[u8]) -> Result<(), glib::Error>;

    #[doc(alias = "hinoko_fw_iso_rx_multiple_map_buffer")]
    fn map_buffer(&self, bytes_per_chunk: u32, chunks_per_buffer: u32) -> Result<(), glib::Error>;

    #[doc(alias = "interrupted")]
    fn connect_interrupted<F: Fn(&Self, u32) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<FwIsoRxMultiple>> FwIsoRxMultipleExt for O {
    fn allocate(&self, path: &str, channels: &[u8]) -> Result<(), glib::Error> {
        let channels_length = channels.len() as u32;
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok = ffi::hinoko_fw_iso_rx_multiple_allocate(
                self.as_ref().to_glib_none().0,
                path.to_glib_none().0,
                channels.to_glib_none().0,
                channels_length,
                &mut error,
            );
            assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn map_buffer(&self, bytes_per_chunk: u32, chunks_per_buffer: u32) -> Result<(), glib::Error> {
        unsafe {
            let mut error = ptr::null_mut();
            let is_ok = ffi::hinoko_fw_iso_rx_multiple_map_buffer(
                self.as_ref().to_glib_none().0,
                bytes_per_chunk,
                chunks_per_buffer,
                &mut error,
            );
            assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() {
                Ok(())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    fn connect_interrupted<F: Fn(&Self, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn interrupted_trampoline<
            P: IsA<FwIsoRxMultiple>,
            F: Fn(&P, u32) + 'static,
        >(
            this: *mut ffi::HinokoFwIsoRxMultiple,
            count: libc::c_uint,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(
                FwIsoRxMultiple::from_glib_borrow(this).unsafe_cast_ref(),
                count,
            )
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"interrupted\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    interrupted_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl fmt::Display for FwIsoRxMultiple {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("FwIsoRxMultiple")
    }
}
